# Generated from d://Code scripts//Principles of Programming Languages//PPL_AS1//assignment1//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,67,574,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,5,0,150,8,0,10,0,12,0,153,9,0,1,0,1,0,1,0,1,0,1,
        0,3,0,160,8,0,1,0,3,0,163,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,3,17,267,8,17,1,17,1,17,
        1,17,1,17,3,17,273,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
        282,8,17,1,17,1,17,1,17,3,17,287,8,17,1,17,1,17,1,18,1,18,5,18,293,
        8,18,10,18,12,18,296,9,18,1,18,1,18,3,18,300,8,18,3,18,302,8,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        316,8,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,324,8,21,1,22,1,22,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
        27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,5,30,370,8,30,10,30,12,30,373,9,30,1,30,3,30,376,8,
        30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,387,8,31,10,
        31,12,31,390,9,31,1,31,3,31,393,8,31,1,31,1,31,1,32,1,32,1,32,1,
        32,1,32,5,32,402,8,32,10,32,12,32,405,9,32,1,32,3,32,408,8,32,1,
        32,1,32,1,33,1,33,3,33,414,8,33,1,33,1,33,3,33,418,8,33,5,33,420,
        8,33,10,33,12,33,423,9,33,1,33,1,33,3,33,427,8,33,1,33,1,33,1,34,
        1,34,1,35,1,35,3,35,435,8,35,1,35,5,35,438,8,35,10,35,12,35,441,
        9,35,1,35,1,35,3,35,445,8,35,1,36,1,36,4,36,449,8,36,11,36,12,36,
        450,1,37,1,37,5,37,455,8,37,10,37,12,37,458,9,37,1,38,1,38,1,39,
        1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
        1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,
        1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,
        1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,
        1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,65,
        5,65,528,8,65,10,65,12,65,531,9,65,1,65,1,65,1,65,1,65,1,65,1,66,
        4,66,539,8,66,11,66,12,66,540,1,66,1,66,1,67,1,67,1,67,1,67,5,67,
        549,8,67,10,67,12,67,552,9,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,
        1,68,1,68,1,68,1,68,5,68,565,8,68,10,68,12,68,568,9,68,1,68,1,68,
        1,69,1,69,1,69,1,529,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,
        19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,57,28,59,29,61,
        30,63,31,65,32,67,33,69,0,71,0,73,34,75,35,77,36,79,37,81,38,83,
        39,85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,48,103,49,
        105,50,107,51,109,52,111,53,113,54,115,55,117,56,119,57,121,58,123,
        59,125,60,127,61,129,62,131,63,133,64,135,65,137,66,139,67,1,0,21,
        7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,4,0,9,10,13,
        13,34,34,92,92,5,0,9,10,13,13,34,34,39,39,92,92,2,0,66,66,98,98,
        2,0,88,88,120,120,2,0,49,57,65,70,3,0,48,57,65,70,95,95,2,0,48,57,
        65,70,2,0,48,49,95,95,1,0,48,49,1,0,49,55,2,0,48,55,95,95,1,0,48,
        55,1,0,49,57,1,0,48,57,3,0,65,90,95,95,97,122,2,0,69,69,101,101,
        2,0,43,43,45,45,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,
        4,0,10,10,13,13,34,34,92,92,609,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
        0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
        0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,
        0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,
        0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,
        139,1,0,0,0,1,162,1,0,0,0,3,166,1,0,0,0,5,171,1,0,0,0,7,174,1,0,
        0,0,9,181,1,0,0,0,11,185,1,0,0,0,13,192,1,0,0,0,15,194,1,0,0,0,17,
        200,1,0,0,0,19,209,1,0,0,0,21,212,1,0,0,0,23,217,1,0,0,0,25,224,
        1,0,0,0,27,232,1,0,0,0,29,235,1,0,0,0,31,247,1,0,0,0,33,258,1,0,
        0,0,35,286,1,0,0,0,37,290,1,0,0,0,39,303,1,0,0,0,41,315,1,0,0,0,
        43,323,1,0,0,0,45,325,1,0,0,0,47,331,1,0,0,0,49,335,1,0,0,0,51,341,
        1,0,0,0,53,349,1,0,0,0,55,353,1,0,0,0,57,356,1,0,0,0,59,358,1,0,
        0,0,61,375,1,0,0,0,63,392,1,0,0,0,65,407,1,0,0,0,67,426,1,0,0,0,
        69,430,1,0,0,0,71,432,1,0,0,0,73,446,1,0,0,0,75,452,1,0,0,0,77,459,
        1,0,0,0,79,461,1,0,0,0,81,463,1,0,0,0,83,465,1,0,0,0,85,467,1,0,
        0,0,87,469,1,0,0,0,89,471,1,0,0,0,91,473,1,0,0,0,93,475,1,0,0,0,
        95,478,1,0,0,0,97,480,1,0,0,0,99,482,1,0,0,0,101,484,1,0,0,0,103,
        487,1,0,0,0,105,490,1,0,0,0,107,492,1,0,0,0,109,494,1,0,0,0,111,
        496,1,0,0,0,113,498,1,0,0,0,115,500,1,0,0,0,117,503,1,0,0,0,119,
        506,1,0,0,0,121,508,1,0,0,0,123,511,1,0,0,0,125,514,1,0,0,0,127,
        516,1,0,0,0,129,520,1,0,0,0,131,523,1,0,0,0,133,538,1,0,0,0,135,
        544,1,0,0,0,137,558,1,0,0,0,139,571,1,0,0,0,141,142,5,34,0,0,142,
        163,5,34,0,0,143,151,5,34,0,0,144,145,5,39,0,0,145,150,5,34,0,0,
        146,147,5,92,0,0,147,150,7,0,0,0,148,150,8,1,0,0,149,144,1,0,0,0,
        149,146,1,0,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,
        151,152,1,0,0,0,152,159,1,0,0,0,153,151,1,0,0,0,154,155,5,39,0,0,
        155,160,5,34,0,0,156,157,5,92,0,0,157,160,7,0,0,0,158,160,8,2,0,
        0,159,154,1,0,0,0,159,156,1,0,0,0,159,158,1,0,0,0,160,161,1,0,0,
        0,161,163,5,34,0,0,162,141,1,0,0,0,162,143,1,0,0,0,163,164,1,0,0,
        0,164,165,6,0,0,0,165,2,1,0,0,0,166,167,5,78,0,0,167,168,5,117,0,
        0,168,169,5,108,0,0,169,170,5,108,0,0,170,4,1,0,0,0,171,172,5,58,
        0,0,172,173,5,58,0,0,173,6,1,0,0,0,174,175,5,83,0,0,175,176,5,116,
        0,0,176,177,5,114,0,0,177,178,5,105,0,0,178,179,5,110,0,0,179,180,
        5,103,0,0,180,8,1,0,0,0,181,182,5,78,0,0,182,183,5,101,0,0,183,184,
        5,119,0,0,184,10,1,0,0,0,185,186,5,82,0,0,186,187,5,101,0,0,187,
        188,5,116,0,0,188,189,5,117,0,0,189,190,5,114,0,0,190,191,5,110,
        0,0,191,12,1,0,0,0,192,193,5,61,0,0,193,14,1,0,0,0,194,195,5,66,
        0,0,195,196,5,114,0,0,196,197,5,101,0,0,197,198,5,97,0,0,198,199,
        5,107,0,0,199,16,1,0,0,0,200,201,5,67,0,0,201,202,5,111,0,0,202,
        203,5,110,0,0,203,204,5,116,0,0,204,205,5,105,0,0,205,206,5,110,
        0,0,206,207,5,117,0,0,207,208,5,101,0,0,208,18,1,0,0,0,209,210,5,
        73,0,0,210,211,5,102,0,0,211,20,1,0,0,0,212,213,5,69,0,0,213,214,
        5,108,0,0,214,215,5,115,0,0,215,216,5,101,0,0,216,22,1,0,0,0,217,
        218,5,69,0,0,218,219,5,108,0,0,219,220,5,115,0,0,220,221,5,101,0,
        0,221,222,5,105,0,0,222,223,5,102,0,0,223,24,1,0,0,0,224,225,5,70,
        0,0,225,226,5,111,0,0,226,227,5,114,0,0,227,228,5,101,0,0,228,229,
        5,97,0,0,229,230,5,99,0,0,230,231,5,104,0,0,231,26,1,0,0,0,232,233,
        5,73,0,0,233,234,5,110,0,0,234,28,1,0,0,0,235,236,5,67,0,0,236,237,
        5,111,0,0,237,238,5,110,0,0,238,239,5,115,0,0,239,240,5,116,0,0,
        240,241,5,114,0,0,241,242,5,117,0,0,242,243,5,99,0,0,243,244,5,116,
        0,0,244,245,5,111,0,0,245,246,5,114,0,0,246,30,1,0,0,0,247,248,5,
        68,0,0,248,249,5,101,0,0,249,250,5,115,0,0,250,251,5,116,0,0,251,
        252,5,114,0,0,252,253,5,117,0,0,253,254,5,99,0,0,254,255,5,116,0,
        0,255,256,5,111,0,0,256,257,5,114,0,0,257,32,1,0,0,0,258,259,5,67,
        0,0,259,260,5,108,0,0,260,261,5,97,0,0,261,262,5,115,0,0,262,263,
        5,115,0,0,263,34,1,0,0,0,264,267,3,67,33,0,265,267,3,57,28,0,266,
        264,1,0,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,269,3,71,35,0,269,
        287,1,0,0,0,270,273,3,67,33,0,271,273,3,57,28,0,272,270,1,0,0,0,
        272,271,1,0,0,0,273,274,1,0,0,0,274,275,3,37,18,0,275,287,1,0,0,
        0,276,277,3,37,18,0,277,278,3,71,35,0,278,287,1,0,0,0,279,282,3,
        67,33,0,280,282,3,57,28,0,281,279,1,0,0,0,281,280,1,0,0,0,282,283,
        1,0,0,0,283,284,3,37,18,0,284,285,3,71,35,0,285,287,1,0,0,0,286,
        266,1,0,0,0,286,272,1,0,0,0,286,276,1,0,0,0,286,281,1,0,0,0,287,
        288,1,0,0,0,288,289,6,17,1,0,289,36,1,0,0,0,290,301,3,77,38,0,291,
        293,3,57,28,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,
        295,1,0,0,0,295,299,1,0,0,0,296,294,1,0,0,0,297,300,3,67,33,0,298,
        300,3,57,28,0,299,297,1,0,0,0,299,298,1,0,0,0,300,302,1,0,0,0,301,
        294,1,0,0,0,301,302,1,0,0,0,302,38,1,0,0,0,303,304,5,66,0,0,304,
        305,5,121,0,0,305,40,1,0,0,0,306,307,5,84,0,0,307,308,5,114,0,0,
        308,309,5,117,0,0,309,316,5,101,0,0,310,311,5,70,0,0,311,312,5,97,
        0,0,312,313,5,108,0,0,313,314,5,115,0,0,314,316,5,101,0,0,315,306,
        1,0,0,0,315,310,1,0,0,0,316,42,1,0,0,0,317,318,5,86,0,0,318,319,
        5,97,0,0,319,324,5,108,0,0,320,321,5,86,0,0,321,322,5,97,0,0,322,
        324,5,114,0,0,323,317,1,0,0,0,323,320,1,0,0,0,324,44,1,0,0,0,325,
        326,5,65,0,0,326,327,5,114,0,0,327,328,5,114,0,0,328,329,5,97,0,
        0,329,330,5,121,0,0,330,46,1,0,0,0,331,332,5,73,0,0,332,333,5,110,
        0,0,333,334,5,116,0,0,334,48,1,0,0,0,335,336,5,70,0,0,336,337,5,
        108,0,0,337,338,5,111,0,0,338,339,5,97,0,0,339,340,5,116,0,0,340,
        50,1,0,0,0,341,342,5,66,0,0,342,343,5,111,0,0,343,344,5,111,0,0,
        344,345,5,108,0,0,345,346,5,101,0,0,346,347,5,97,0,0,347,348,5,110,
        0,0,348,52,1,0,0,0,349,350,5,48,0,0,350,351,7,3,0,0,351,352,5,48,
        0,0,352,54,1,0,0,0,353,354,5,48,0,0,354,355,5,48,0,0,355,56,1,0,
        0,0,356,357,5,48,0,0,357,58,1,0,0,0,358,359,5,48,0,0,359,360,7,4,
        0,0,360,361,5,48,0,0,361,60,1,0,0,0,362,363,5,48,0,0,363,364,7,4,
        0,0,364,376,7,5,0,0,365,366,5,48,0,0,366,367,7,4,0,0,367,371,7,5,
        0,0,368,370,7,6,0,0,369,368,1,0,0,0,370,373,1,0,0,0,371,369,1,0,
        0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,0,0,0,374,376,7,7,
        0,0,375,362,1,0,0,0,375,365,1,0,0,0,376,377,1,0,0,0,377,378,6,30,
        2,0,378,62,1,0,0,0,379,380,5,48,0,0,380,381,7,3,0,0,381,393,5,49,
        0,0,382,383,5,48,0,0,383,384,7,3,0,0,384,388,5,49,0,0,385,387,7,
        8,0,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,
        0,0,0,389,391,1,0,0,0,390,388,1,0,0,0,391,393,7,9,0,0,392,379,1,
        0,0,0,392,382,1,0,0,0,393,394,1,0,0,0,394,395,6,31,3,0,395,64,1,
        0,0,0,396,397,5,48,0,0,397,408,7,10,0,0,398,399,5,48,0,0,399,403,
        7,10,0,0,400,402,7,11,0,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,
        1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,408,
        7,12,0,0,407,396,1,0,0,0,407,398,1,0,0,0,408,409,1,0,0,0,409,410,
        6,32,4,0,410,66,1,0,0,0,411,413,7,13,0,0,412,414,5,95,0,0,413,412,
        1,0,0,0,413,414,1,0,0,0,414,421,1,0,0,0,415,417,7,14,0,0,416,418,
        5,95,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,415,
        1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,
        1,0,0,0,423,421,1,0,0,0,424,427,7,14,0,0,425,427,7,13,0,0,426,411,
        1,0,0,0,426,425,1,0,0,0,427,428,1,0,0,0,428,429,6,33,5,0,429,68,
        1,0,0,0,430,431,7,15,0,0,431,70,1,0,0,0,432,434,7,16,0,0,433,435,
        7,17,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,439,1,0,0,0,436,438,
        5,48,0,0,437,436,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,
        1,0,0,0,440,444,1,0,0,0,441,439,1,0,0,0,442,445,3,67,33,0,443,445,
        5,48,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,72,1,0,0,0,446,448,
        5,36,0,0,447,449,7,18,0,0,448,447,1,0,0,0,449,450,1,0,0,0,450,448,
        1,0,0,0,450,451,1,0,0,0,451,74,1,0,0,0,452,456,7,15,0,0,453,455,
        7,18,0,0,454,453,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,
        1,0,0,0,457,76,1,0,0,0,458,456,1,0,0,0,459,460,5,46,0,0,460,78,1,
        0,0,0,461,462,5,44,0,0,462,80,1,0,0,0,463,464,5,91,0,0,464,82,1,
        0,0,0,465,466,5,93,0,0,466,84,1,0,0,0,467,468,5,40,0,0,468,86,1,
        0,0,0,469,470,5,41,0,0,470,88,1,0,0,0,471,472,5,123,0,0,472,90,1,
        0,0,0,473,474,5,125,0,0,474,92,1,0,0,0,475,476,5,46,0,0,476,477,
        5,46,0,0,477,94,1,0,0,0,478,479,5,58,0,0,479,96,1,0,0,0,480,481,
        5,59,0,0,481,98,1,0,0,0,482,483,5,43,0,0,483,100,1,0,0,0,484,485,
        5,60,0,0,485,486,5,61,0,0,486,102,1,0,0,0,487,488,5,62,0,0,488,489,
        5,61,0,0,489,104,1,0,0,0,490,491,5,45,0,0,491,106,1,0,0,0,492,493,
        5,42,0,0,493,108,1,0,0,0,494,495,5,60,0,0,495,110,1,0,0,0,496,497,
        5,37,0,0,497,112,1,0,0,0,498,499,5,47,0,0,499,114,1,0,0,0,500,501,
        5,33,0,0,501,502,5,61,0,0,502,116,1,0,0,0,503,504,5,61,0,0,504,505,
        5,61,0,0,505,118,1,0,0,0,506,507,5,62,0,0,507,120,1,0,0,0,508,509,
        5,38,0,0,509,510,5,38,0,0,510,122,1,0,0,0,511,512,5,124,0,0,512,
        513,5,124,0,0,513,124,1,0,0,0,514,515,5,33,0,0,515,126,1,0,0,0,516,
        517,5,61,0,0,517,518,5,61,0,0,518,519,5,46,0,0,519,128,1,0,0,0,520,
        521,5,43,0,0,521,522,5,46,0,0,522,130,1,0,0,0,523,524,5,35,0,0,524,
        525,5,35,0,0,525,529,1,0,0,0,526,528,9,0,0,0,527,526,1,0,0,0,528,
        531,1,0,0,0,529,530,1,0,0,0,529,527,1,0,0,0,530,532,1,0,0,0,531,
        529,1,0,0,0,532,533,5,35,0,0,533,534,5,35,0,0,534,535,1,0,0,0,535,
        536,6,65,6,0,536,132,1,0,0,0,537,539,7,19,0,0,538,537,1,0,0,0,539,
        540,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,
        543,6,66,6,0,543,134,1,0,0,0,544,550,5,34,0,0,545,546,5,92,0,0,546,
        549,7,0,0,0,547,549,8,20,0,0,548,545,1,0,0,0,548,547,1,0,0,0,549,
        552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,
        550,1,0,0,0,553,554,5,92,0,0,554,555,8,0,0,0,555,556,1,0,0,0,556,
        557,6,67,7,0,557,136,1,0,0,0,558,566,5,34,0,0,559,560,5,39,0,0,560,
        565,5,34,0,0,561,562,5,92,0,0,562,565,7,0,0,0,563,565,8,1,0,0,564,
        559,1,0,0,0,564,561,1,0,0,0,564,563,1,0,0,0,565,568,1,0,0,0,566,
        564,1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,566,1,0,0,0,569,
        570,6,68,8,0,570,138,1,0,0,0,571,572,9,0,0,0,572,573,6,69,9,0,573,
        140,1,0,0,0,35,0,149,151,159,162,266,272,281,286,294,299,301,315,
        323,371,375,388,392,403,407,413,417,421,426,434,439,444,450,456,
        529,540,548,550,564,566,10,1,0,0,1,17,1,1,30,2,1,31,3,1,32,4,1,33,
        5,6,0,0,1,67,6,1,68,7,1,69,8
    ]

class D96Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STRINGLIT = 1
    NULL = 2
    MEM_ACCESS_OP = 3
    STRING_TYPE = 4
    NEW = 5
    RETURN = 6
    ASSIGN_OP = 7
    BREAK = 8
    CONTINUE = 9
    IF = 10
    ELSE = 11
    ELSEIF = 12
    FOREACH = 13
    IN = 14
    CONSTRUCTOR = 15
    DESTRUCTOR = 16
    CLASS = 17
    FLOATLIT = 18
    BY = 19
    BOOLIT = 20
    VAL_VAR = 21
    ARRAY = 22
    INT_TYPE = 23
    FLOAT_TYPE = 24
    BOOL_TYPE = 25
    ZERO_2 = 26
    ZERO_8 = 27
    ZERO_10 = 28
    ZERO_16 = 29
    INTLIT_16 = 30
    INTLIT_2 = 31
    INTLIT_8 = 32
    INTLIT_10 = 33
    DOLLAR_ID = 34
    ID = 35
    DOT = 36
    CM = 37
    LS = 38
    RS = 39
    LB = 40
    RB = 41
    LP = 42
    RP = 43
    RANGE = 44
    CL = 45
    SEMI = 46
    ADDOP = 47
    LESS_EQUAL = 48
    GREAT_EQUAL = 49
    SUBOP = 50
    MULOP = 51
    LESS_THAN = 52
    MODOP = 53
    DIVOP = 54
    NOT_EQUAL = 55
    EQUAL = 56
    GREAT_THAN = 57
    AND = 58
    OR = 59
    NEGATE = 60
    STR_CMP = 61
    STR_CONCAT = 62
    COMMENT = 63
    WS = 64
    ILLEGAL_ESCAPE = 65
    UNCLOSED_STRING = 66
    ERROR_CHAR = 67

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Null'", "'::'", "'String'", "'New'", "'Return'", "'='", "'Break'", 
            "'Continue'", "'If'", "'Else'", "'Elseif'", "'Foreach'", "'In'", 
            "'Constructor'", "'Destructor'", "'Class'", "'By'", "'Array'", 
            "'Int'", "'Float'", "'Boolean'", "'00'", "'0'", "'.'", "','", 
            "'['", "']'", "'('", "')'", "'{'", "'}'", "'..'", "':'", "';'", 
            "'+'", "'<='", "'>='", "'-'", "'*'", "'<'", "'%'", "'/'", "'!='", 
            "'=='", "'>'", "'&&'", "'||'", "'!'", "'==.'", "'+.'" ]

    symbolicNames = [ "<INVALID>",
            "STRINGLIT", "NULL", "MEM_ACCESS_OP", "STRING_TYPE", "NEW", 
            "RETURN", "ASSIGN_OP", "BREAK", "CONTINUE", "IF", "ELSE", "ELSEIF", 
            "FOREACH", "IN", "CONSTRUCTOR", "DESTRUCTOR", "CLASS", "FLOATLIT", 
            "BY", "BOOLIT", "VAL_VAR", "ARRAY", "INT_TYPE", "FLOAT_TYPE", 
            "BOOL_TYPE", "ZERO_2", "ZERO_8", "ZERO_10", "ZERO_16", "INTLIT_16", 
            "INTLIT_2", "INTLIT_8", "INTLIT_10", "DOLLAR_ID", "ID", "DOT", 
            "CM", "LS", "RS", "LB", "RB", "LP", "RP", "RANGE", "CL", "SEMI", 
            "ADDOP", "LESS_EQUAL", "GREAT_EQUAL", "SUBOP", "MULOP", "LESS_THAN", 
            "MODOP", "DIVOP", "NOT_EQUAL", "EQUAL", "GREAT_THAN", "AND", 
            "OR", "NEGATE", "STR_CMP", "STR_CONCAT", "COMMENT", "WS", "ILLEGAL_ESCAPE", 
            "UNCLOSED_STRING", "ERROR_CHAR" ]

    ruleNames = [ "STRINGLIT", "NULL", "MEM_ACCESS_OP", "STRING_TYPE", "NEW", 
                  "RETURN", "ASSIGN_OP", "BREAK", "CONTINUE", "IF", "ELSE", 
                  "ELSEIF", "FOREACH", "IN", "CONSTRUCTOR", "DESTRUCTOR", 
                  "CLASS", "FLOATLIT", "DECIMAL", "BY", "BOOLIT", "VAL_VAR", 
                  "ARRAY", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "ZERO_2", 
                  "ZERO_8", "ZERO_10", "ZERO_16", "INTLIT_16", "INTLIT_2", 
                  "INTLIT_8", "INTLIT_10", "LIT", "EXPONENT", "DOLLAR_ID", 
                  "ID", "DOT", "CM", "LS", "RS", "LB", "RB", "LP", "RP", 
                  "RANGE", "CL", "SEMI", "ADDOP", "LESS_EQUAL", "GREAT_EQUAL", 
                  "SUBOP", "MULOP", "LESS_THAN", "MODOP", "DIVOP", "NOT_EQUAL", 
                  "EQUAL", "GREAT_THAN", "AND", "OR", "NEGATE", "STR_CMP", 
                  "STR_CONCAT", "COMMENT", "WS", "ILLEGAL_ESCAPE", "UNCLOSED_STRING", 
                  "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[0] = self.STRINGLIT_action 
            actions[17] = self.FLOATLIT_action 
            actions[30] = self.INTLIT_16_action 
            actions[31] = self.INTLIT_2_action 
            actions[32] = self.INTLIT_8_action 
            actions[33] = self.INTLIT_10_action 
            actions[67] = self.ILLEGAL_ESCAPE_action 
            actions[68] = self.UNCLOSED_STRING_action 
            actions[69] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def FLOATLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.replace("_","")
     

    def INTLIT_16_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text.replace("_","")
     

    def INTLIT_2_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text.replace("_","")
     

    def INTLIT_8_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.text = self.text.replace("_","")
     

    def INTLIT_10_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self.text = self.text.replace("_","")
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            self.text = self.text[1:]; raise IllegalEscape(self.text)
     

    def UNCLOSED_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            self.text = self.text[1:]; raise UncloseString(self.text)
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 8:
            raise ErrorToken(self.text)
     


