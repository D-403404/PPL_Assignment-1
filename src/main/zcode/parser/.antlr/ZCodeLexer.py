# Generated from d://Code scripts//Principles of Programming Languages//PPL_AS1//assignment1//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,52,407,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,0,1,0,5,0,126,8,0,10,0,12,0,129,9,0,1,0,1,
        0,1,1,4,1,134,8,1,11,1,12,1,135,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,4,2,149,8,2,11,2,12,2,150,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,3,10,172,8,
        10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
        27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
        35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,
        40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,
        44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,5,47,327,8,
        47,10,47,12,47,330,9,47,1,48,1,48,3,48,334,8,48,1,48,3,48,337,8,
        48,1,49,1,49,1,50,4,50,342,8,50,11,50,12,50,343,1,51,1,51,5,51,348,
        8,51,10,51,12,51,351,9,51,1,52,1,52,3,52,355,8,52,1,52,4,52,358,
        8,52,11,52,12,52,359,1,53,1,53,3,53,364,8,53,1,54,1,54,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,5,55,375,8,55,10,55,12,55,378,9,55,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,392,
        8,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,0,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,0,25,0,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,
        20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,
        31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,
        42,89,43,91,44,93,45,95,46,97,47,99,0,101,0,103,0,105,0,107,48,109,
        49,111,0,113,0,115,50,117,51,119,52,1,0,9,1,0,10,10,3,0,8,9,12,13,
        32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,10,10,34,34,92,92,7,0,39,
        39,92,92,98,98,102,102,110,110,114,114,116,116,422,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
        0,119,1,0,0,0,1,121,1,0,0,0,3,133,1,0,0,0,5,148,1,0,0,0,7,154,1,
        0,0,0,9,156,1,0,0,0,11,158,1,0,0,0,13,160,1,0,0,0,15,162,1,0,0,0,
        17,164,1,0,0,0,19,166,1,0,0,0,21,171,1,0,0,0,23,173,1,0,0,0,25,178,
        1,0,0,0,27,184,1,0,0,0,29,191,1,0,0,0,31,196,1,0,0,0,33,203,1,0,
        0,0,35,210,1,0,0,0,37,214,1,0,0,0,39,222,1,0,0,0,41,227,1,0,0,0,
        43,231,1,0,0,0,45,237,1,0,0,0,47,240,1,0,0,0,49,246,1,0,0,0,51,255,
        1,0,0,0,53,258,1,0,0,0,55,263,1,0,0,0,57,268,1,0,0,0,59,274,1,0,
        0,0,61,278,1,0,0,0,63,280,1,0,0,0,65,282,1,0,0,0,67,284,1,0,0,0,
        69,286,1,0,0,0,71,288,1,0,0,0,73,291,1,0,0,0,75,293,1,0,0,0,77,296,
        1,0,0,0,79,298,1,0,0,0,81,300,1,0,0,0,83,303,1,0,0,0,85,306,1,0,
        0,0,87,310,1,0,0,0,89,313,1,0,0,0,91,317,1,0,0,0,93,321,1,0,0,0,
        95,324,1,0,0,0,97,331,1,0,0,0,99,338,1,0,0,0,101,341,1,0,0,0,103,
        345,1,0,0,0,105,352,1,0,0,0,107,363,1,0,0,0,109,365,1,0,0,0,111,
        376,1,0,0,0,113,391,1,0,0,0,115,393,1,0,0,0,117,396,1,0,0,0,119,
        400,1,0,0,0,121,122,5,35,0,0,122,123,5,35,0,0,123,127,1,0,0,0,124,
        126,8,0,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,
        128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,6,0,0,0,131,
        2,1,0,0,0,132,134,7,1,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,
        1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,6,1,0,0,138,4,1,
        0,0,0,139,149,5,32,0,0,140,141,5,92,0,0,141,149,5,116,0,0,142,143,
        5,92,0,0,143,149,5,98,0,0,144,145,5,92,0,0,145,149,5,102,0,0,146,
        147,5,92,0,0,147,149,5,114,0,0,148,139,1,0,0,0,148,140,1,0,0,0,148,
        142,1,0,0,0,148,144,1,0,0,0,148,146,1,0,0,0,149,150,1,0,0,0,150,
        148,1,0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,153,6,2,0,0,153,
        6,1,0,0,0,154,155,5,40,0,0,155,8,1,0,0,0,156,157,5,41,0,0,157,10,
        1,0,0,0,158,159,5,91,0,0,159,12,1,0,0,0,160,161,5,93,0,0,161,14,
        1,0,0,0,162,163,5,46,0,0,163,16,1,0,0,0,164,165,5,44,0,0,165,18,
        1,0,0,0,166,167,5,59,0,0,167,20,1,0,0,0,168,172,5,10,0,0,169,170,
        5,92,0,0,170,172,5,110,0,0,171,168,1,0,0,0,171,169,1,0,0,0,172,22,
        1,0,0,0,173,174,5,116,0,0,174,175,5,114,0,0,175,176,5,117,0,0,176,
        177,5,101,0,0,177,24,1,0,0,0,178,179,5,102,0,0,179,180,5,97,0,0,
        180,181,5,108,0,0,181,182,5,115,0,0,182,183,5,101,0,0,183,26,1,0,
        0,0,184,185,5,110,0,0,185,186,5,117,0,0,186,187,5,109,0,0,187,188,
        5,98,0,0,188,189,5,101,0,0,189,190,5,114,0,0,190,28,1,0,0,0,191,
        192,5,98,0,0,192,193,5,111,0,0,193,194,5,111,0,0,194,195,5,108,0,
        0,195,30,1,0,0,0,196,197,5,115,0,0,197,198,5,116,0,0,198,199,5,114,
        0,0,199,200,5,105,0,0,200,201,5,110,0,0,201,202,5,103,0,0,202,32,
        1,0,0,0,203,204,5,114,0,0,204,205,5,101,0,0,205,206,5,116,0,0,206,
        207,5,117,0,0,207,208,5,114,0,0,208,209,5,110,0,0,209,34,1,0,0,0,
        210,211,5,118,0,0,211,212,5,97,0,0,212,213,5,114,0,0,213,36,1,0,
        0,0,214,215,5,100,0,0,215,216,5,121,0,0,216,217,5,110,0,0,217,218,
        5,97,0,0,218,219,5,109,0,0,219,220,5,105,0,0,220,221,5,99,0,0,221,
        38,1,0,0,0,222,223,5,102,0,0,223,224,5,117,0,0,224,225,5,110,0,0,
        225,226,5,99,0,0,226,40,1,0,0,0,227,228,5,102,0,0,228,229,5,111,
        0,0,229,230,5,114,0,0,230,42,1,0,0,0,231,232,5,117,0,0,232,233,5,
        110,0,0,233,234,5,116,0,0,234,235,5,105,0,0,235,236,5,108,0,0,236,
        44,1,0,0,0,237,238,5,98,0,0,238,239,5,121,0,0,239,46,1,0,0,0,240,
        241,5,98,0,0,241,242,5,114,0,0,242,243,5,101,0,0,243,244,5,97,0,
        0,244,245,5,107,0,0,245,48,1,0,0,0,246,247,5,99,0,0,247,248,5,111,
        0,0,248,249,5,110,0,0,249,250,5,116,0,0,250,251,5,105,0,0,251,252,
        5,110,0,0,252,253,5,117,0,0,253,254,5,101,0,0,254,50,1,0,0,0,255,
        256,5,105,0,0,256,257,5,102,0,0,257,52,1,0,0,0,258,259,5,101,0,0,
        259,260,5,108,0,0,260,261,5,115,0,0,261,262,5,101,0,0,262,54,1,0,
        0,0,263,264,5,101,0,0,264,265,5,108,0,0,265,266,5,105,0,0,266,267,
        5,102,0,0,267,56,1,0,0,0,268,269,5,98,0,0,269,270,5,101,0,0,270,
        271,5,103,0,0,271,272,5,105,0,0,272,273,5,110,0,0,273,58,1,0,0,0,
        274,275,5,101,0,0,275,276,5,110,0,0,276,277,5,100,0,0,277,60,1,0,
        0,0,278,279,5,43,0,0,279,62,1,0,0,0,280,281,5,45,0,0,281,64,1,0,
        0,0,282,283,5,42,0,0,283,66,1,0,0,0,284,285,5,47,0,0,285,68,1,0,
        0,0,286,287,5,37,0,0,287,70,1,0,0,0,288,289,5,60,0,0,289,290,5,45,
        0,0,290,72,1,0,0,0,291,292,5,61,0,0,292,74,1,0,0,0,293,294,5,33,
        0,0,294,295,5,61,0,0,295,76,1,0,0,0,296,297,5,60,0,0,297,78,1,0,
        0,0,298,299,5,62,0,0,299,80,1,0,0,0,300,301,5,60,0,0,301,302,5,61,
        0,0,302,82,1,0,0,0,303,304,5,62,0,0,304,305,5,61,0,0,305,84,1,0,
        0,0,306,307,5,46,0,0,307,308,5,46,0,0,308,309,5,46,0,0,309,86,1,
        0,0,0,310,311,5,61,0,0,311,312,5,61,0,0,312,88,1,0,0,0,313,314,5,
        110,0,0,314,315,5,111,0,0,315,316,5,116,0,0,316,90,1,0,0,0,317,318,
        5,97,0,0,318,319,5,110,0,0,319,320,5,100,0,0,320,92,1,0,0,0,321,
        322,5,111,0,0,322,323,5,114,0,0,323,94,1,0,0,0,324,328,7,2,0,0,325,
        327,7,3,0,0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,
        329,1,0,0,0,329,96,1,0,0,0,330,328,1,0,0,0,331,333,3,101,50,0,332,
        334,3,103,51,0,333,332,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,
        337,3,105,52,0,336,335,1,0,0,0,336,337,1,0,0,0,337,98,1,0,0,0,338,
        339,7,4,0,0,339,100,1,0,0,0,340,342,3,99,49,0,341,340,1,0,0,0,342,
        343,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,102,1,0,0,0,345,
        349,5,46,0,0,346,348,3,99,49,0,347,346,1,0,0,0,348,351,1,0,0,0,349,
        347,1,0,0,0,349,350,1,0,0,0,350,104,1,0,0,0,351,349,1,0,0,0,352,
        354,7,5,0,0,353,355,7,6,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,
        357,1,0,0,0,356,358,3,99,49,0,357,356,1,0,0,0,358,359,1,0,0,0,359,
        357,1,0,0,0,359,360,1,0,0,0,360,106,1,0,0,0,361,364,3,23,11,0,362,
        364,3,25,12,0,363,361,1,0,0,0,363,362,1,0,0,0,364,108,1,0,0,0,365,
        366,5,34,0,0,366,367,3,111,55,0,367,368,5,34,0,0,368,369,6,54,1,
        0,369,110,1,0,0,0,370,375,8,7,0,0,371,375,3,113,56,0,372,373,5,39,
        0,0,373,375,5,34,0,0,374,370,1,0,0,0,374,371,1,0,0,0,374,372,1,0,
        0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,112,1,0,
        0,0,378,376,1,0,0,0,379,380,5,92,0,0,380,392,5,98,0,0,381,382,5,
        92,0,0,382,392,5,116,0,0,383,384,5,92,0,0,384,392,5,102,0,0,385,
        386,5,92,0,0,386,392,5,114,0,0,387,388,5,92,0,0,388,392,5,39,0,0,
        389,390,5,92,0,0,390,392,5,92,0,0,391,379,1,0,0,0,391,381,1,0,0,
        0,391,383,1,0,0,0,391,385,1,0,0,0,391,387,1,0,0,0,391,389,1,0,0,
        0,392,114,1,0,0,0,393,394,9,0,0,0,394,395,6,57,2,0,395,116,1,0,0,
        0,396,397,5,34,0,0,397,398,3,111,55,0,398,399,6,58,3,0,399,118,1,
        0,0,0,400,401,5,34,0,0,401,402,3,111,55,0,402,403,5,92,0,0,403,404,
        8,8,0,0,404,405,1,0,0,0,405,406,6,59,4,0,406,120,1,0,0,0,17,0,127,
        135,148,150,171,328,333,336,343,349,354,359,363,374,376,391,5,6,
        0,0,1,54,0,1,57,1,1,58,2,1,59,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 1
    WS = 2
    WS2 = 3
    SB_LEFTBRACKET = 4
    SB_RIGHTBRACKET = 5
    SB_LEFTSQUARE = 6
    SB_RIGHTSQUARE = 7
    SB_DOT = 8
    SB_COMMA = 9
    SB_SEMICOLON = 10
    SB_NEWLINE = 11
    KW_NUMBER = 12
    KW_BOOL = 13
    KW_STRING = 14
    KW_RETURN = 15
    KW_VAR = 16
    KW_DYNAMIC = 17
    KW_FUNC = 18
    KW_FOR = 19
    KW_UNTIL = 20
    KW_BY = 21
    KW_BREAK = 22
    KW_CONTINUE = 23
    KW_IF = 24
    KW_ELSE = 25
    KW_ELIF = 26
    KW_BEGIN = 27
    KW_END = 28
    OP_PLUS = 29
    OP_MINUS = 30
    OP_MULT = 31
    OP_DIV = 32
    OP_MOD = 33
    OP_ASSIGN = 34
    OP_EQUAL_NUM = 35
    OP_UNEQUAL = 36
    OP_LESS = 37
    OP_MORE = 38
    OP_LESSOREQUAL = 39
    OP_MOREOREQUAL = 40
    OP_CONCAT = 41
    OP_EQUAL_STR = 42
    OP_NOT = 43
    OP_AND = 44
    OP_OR = 45
    IDENTIFIER = 46
    NUMBER = 47
    BOOL = 48
    STRING = 49
    ERROR_CHAR = 50
    UNCLOSE_STRING = 51
    ILLEGAL_ESCAPE = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'.'", "','", "';'", "'number'", 
            "'bool'", "'string'", "'return'", "'var'", "'dynamic'", "'func'", 
            "'for'", "'until'", "'by'", "'break'", "'continue'", "'if'", 
            "'else'", "'elif'", "'begin'", "'end'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'<-'", "'='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'...'", "'=='", "'not'", "'and'", "'or'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "WS", "WS2", "SB_LEFTBRACKET", "SB_RIGHTBRACKET", 
            "SB_LEFTSQUARE", "SB_RIGHTSQUARE", "SB_DOT", "SB_COMMA", "SB_SEMICOLON", 
            "SB_NEWLINE", "KW_NUMBER", "KW_BOOL", "KW_STRING", "KW_RETURN", 
            "KW_VAR", "KW_DYNAMIC", "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", 
            "KW_BREAK", "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", 
            "KW_END", "OP_PLUS", "OP_MINUS", "OP_MULT", "OP_DIV", "OP_MOD", 
            "OP_ASSIGN", "OP_EQUAL_NUM", "OP_UNEQUAL", "OP_LESS", "OP_MORE", 
            "OP_LESSOREQUAL", "OP_MOREOREQUAL", "OP_CONCAT", "OP_EQUAL_STR", 
            "OP_NOT", "OP_AND", "OP_OR", "IDENTIFIER", "NUMBER", "BOOL", 
            "STRING", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "COMMENT", "WS", "WS2", "SB_LEFTBRACKET", "SB_RIGHTBRACKET", 
                  "SB_LEFTSQUARE", "SB_RIGHTSQUARE", "SB_DOT", "SB_COMMA", 
                  "SB_SEMICOLON", "SB_NEWLINE", "KW_TRUE", "KW_FALSE", "KW_NUMBER", 
                  "KW_BOOL", "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", 
                  "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", 
                  "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", 
                  "KW_END", "OP_PLUS", "OP_MINUS", "OP_MULT", "OP_DIV", 
                  "OP_MOD", "OP_ASSIGN", "OP_EQUAL_NUM", "OP_UNEQUAL", "OP_LESS", 
                  "OP_MORE", "OP_LESSOREQUAL", "OP_MOREOREQUAL", "OP_CONCAT", 
                  "OP_EQUAL_STR", "OP_NOT", "OP_AND", "OP_OR", "IDENTIFIER", 
                  "NUMBER", "Digit", "IntPart", "DecPart", "ExpPart", "BOOL", 
                  "STRING", "StringContent", "EscSequence", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[54] = self.STRING_action 
            actions[57] = self.ERROR_CHAR_action 
            actions[58] = self.UNCLOSE_STRING_action 
            actions[59] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:len(self.text)-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:]; raise UncloseString(self.text)
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text[1:]; raise IllegalEscape(self.text)
     


