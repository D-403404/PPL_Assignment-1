# Generated from d://Code scripts//Principles of Programming Languages//PPL_AS1//assignment1//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,393,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,1,0,1,0,1,0,1,0,5,0,124,8,0,10,0,12,0,127,9,0,1,0,1,0,1,0,1,0,
        1,1,4,1,134,8,1,11,1,12,1,135,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,
        31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,
        41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
        45,1,45,1,45,1,46,1,46,5,46,309,8,46,10,46,12,46,312,9,46,1,47,1,
        47,3,47,316,8,47,1,47,3,47,319,8,47,1,48,1,48,1,49,4,49,324,8,49,
        11,49,12,49,325,1,50,1,50,5,50,330,8,50,10,50,12,50,333,9,50,1,51,
        1,51,3,51,337,8,51,1,51,4,51,340,8,51,11,51,12,51,341,1,52,1,52,
        3,52,346,8,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,5,54,
        357,8,54,10,54,12,54,360,9,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,3,55,370,8,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,
        1,58,1,58,1,58,5,58,384,8,58,10,58,12,58,387,9,58,1,58,1,58,1,58,
        1,58,1,58,1,125,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,0,23,0,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,
        19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,
        30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,
        41,87,42,89,43,91,44,93,45,95,46,97,0,99,0,101,0,103,0,105,47,107,
        48,109,0,111,0,113,49,115,50,117,51,1,0,9,2,0,8,9,32,32,2,0,10,10,
        12,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,12,13,34,34,92,92,
        7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,403,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,105,1,0,0,0,0,107,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
        1,0,0,0,1,119,1,0,0,0,3,133,1,0,0,0,5,139,1,0,0,0,7,141,1,0,0,0,
        9,143,1,0,0,0,11,145,1,0,0,0,13,147,1,0,0,0,15,149,1,0,0,0,17,151,
        1,0,0,0,19,153,1,0,0,0,21,155,1,0,0,0,23,160,1,0,0,0,25,166,1,0,
        0,0,27,173,1,0,0,0,29,178,1,0,0,0,31,185,1,0,0,0,33,192,1,0,0,0,
        35,196,1,0,0,0,37,204,1,0,0,0,39,209,1,0,0,0,41,213,1,0,0,0,43,219,
        1,0,0,0,45,222,1,0,0,0,47,228,1,0,0,0,49,237,1,0,0,0,51,240,1,0,
        0,0,53,245,1,0,0,0,55,250,1,0,0,0,57,256,1,0,0,0,59,260,1,0,0,0,
        61,262,1,0,0,0,63,264,1,0,0,0,65,266,1,0,0,0,67,268,1,0,0,0,69,270,
        1,0,0,0,71,273,1,0,0,0,73,275,1,0,0,0,75,278,1,0,0,0,77,280,1,0,
        0,0,79,282,1,0,0,0,81,285,1,0,0,0,83,288,1,0,0,0,85,292,1,0,0,0,
        87,295,1,0,0,0,89,299,1,0,0,0,91,303,1,0,0,0,93,306,1,0,0,0,95,313,
        1,0,0,0,97,320,1,0,0,0,99,323,1,0,0,0,101,327,1,0,0,0,103,334,1,
        0,0,0,105,345,1,0,0,0,107,347,1,0,0,0,109,358,1,0,0,0,111,369,1,
        0,0,0,113,371,1,0,0,0,115,374,1,0,0,0,117,378,1,0,0,0,119,120,5,
        35,0,0,120,121,5,35,0,0,121,125,1,0,0,0,122,124,9,0,0,0,123,122,
        1,0,0,0,124,127,1,0,0,0,125,126,1,0,0,0,125,123,1,0,0,0,126,128,
        1,0,0,0,127,125,1,0,0,0,128,129,3,19,9,0,129,130,1,0,0,0,130,131,
        6,0,0,0,131,2,1,0,0,0,132,134,7,0,0,0,133,132,1,0,0,0,134,135,1,
        0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,6,
        1,0,0,138,4,1,0,0,0,139,140,5,40,0,0,140,6,1,0,0,0,141,142,5,41,
        0,0,142,8,1,0,0,0,143,144,5,91,0,0,144,10,1,0,0,0,145,146,5,93,0,
        0,146,12,1,0,0,0,147,148,5,46,0,0,148,14,1,0,0,0,149,150,5,44,0,
        0,150,16,1,0,0,0,151,152,5,59,0,0,152,18,1,0,0,0,153,154,7,1,0,0,
        154,20,1,0,0,0,155,156,5,116,0,0,156,157,5,114,0,0,157,158,5,117,
        0,0,158,159,5,101,0,0,159,22,1,0,0,0,160,161,5,102,0,0,161,162,5,
        97,0,0,162,163,5,108,0,0,163,164,5,115,0,0,164,165,5,101,0,0,165,
        24,1,0,0,0,166,167,5,110,0,0,167,168,5,117,0,0,168,169,5,109,0,0,
        169,170,5,98,0,0,170,171,5,101,0,0,171,172,5,114,0,0,172,26,1,0,
        0,0,173,174,5,98,0,0,174,175,5,111,0,0,175,176,5,111,0,0,176,177,
        5,108,0,0,177,28,1,0,0,0,178,179,5,115,0,0,179,180,5,116,0,0,180,
        181,5,114,0,0,181,182,5,105,0,0,182,183,5,110,0,0,183,184,5,103,
        0,0,184,30,1,0,0,0,185,186,5,114,0,0,186,187,5,101,0,0,187,188,5,
        116,0,0,188,189,5,117,0,0,189,190,5,114,0,0,190,191,5,110,0,0,191,
        32,1,0,0,0,192,193,5,118,0,0,193,194,5,97,0,0,194,195,5,114,0,0,
        195,34,1,0,0,0,196,197,5,100,0,0,197,198,5,121,0,0,198,199,5,110,
        0,0,199,200,5,97,0,0,200,201,5,109,0,0,201,202,5,105,0,0,202,203,
        5,99,0,0,203,36,1,0,0,0,204,205,5,102,0,0,205,206,5,117,0,0,206,
        207,5,110,0,0,207,208,5,99,0,0,208,38,1,0,0,0,209,210,5,102,0,0,
        210,211,5,111,0,0,211,212,5,114,0,0,212,40,1,0,0,0,213,214,5,117,
        0,0,214,215,5,110,0,0,215,216,5,116,0,0,216,217,5,105,0,0,217,218,
        5,108,0,0,218,42,1,0,0,0,219,220,5,98,0,0,220,221,5,121,0,0,221,
        44,1,0,0,0,222,223,5,98,0,0,223,224,5,114,0,0,224,225,5,101,0,0,
        225,226,5,97,0,0,226,227,5,107,0,0,227,46,1,0,0,0,228,229,5,99,0,
        0,229,230,5,111,0,0,230,231,5,110,0,0,231,232,5,116,0,0,232,233,
        5,105,0,0,233,234,5,110,0,0,234,235,5,117,0,0,235,236,5,101,0,0,
        236,48,1,0,0,0,237,238,5,105,0,0,238,239,5,102,0,0,239,50,1,0,0,
        0,240,241,5,101,0,0,241,242,5,108,0,0,242,243,5,115,0,0,243,244,
        5,101,0,0,244,52,1,0,0,0,245,246,5,101,0,0,246,247,5,108,0,0,247,
        248,5,105,0,0,248,249,5,102,0,0,249,54,1,0,0,0,250,251,5,98,0,0,
        251,252,5,101,0,0,252,253,5,103,0,0,253,254,5,105,0,0,254,255,5,
        110,0,0,255,56,1,0,0,0,256,257,5,101,0,0,257,258,5,110,0,0,258,259,
        5,100,0,0,259,58,1,0,0,0,260,261,5,43,0,0,261,60,1,0,0,0,262,263,
        5,45,0,0,263,62,1,0,0,0,264,265,5,42,0,0,265,64,1,0,0,0,266,267,
        5,47,0,0,267,66,1,0,0,0,268,269,5,37,0,0,269,68,1,0,0,0,270,271,
        5,60,0,0,271,272,5,45,0,0,272,70,1,0,0,0,273,274,5,61,0,0,274,72,
        1,0,0,0,275,276,5,33,0,0,276,277,5,61,0,0,277,74,1,0,0,0,278,279,
        5,60,0,0,279,76,1,0,0,0,280,281,5,62,0,0,281,78,1,0,0,0,282,283,
        5,60,0,0,283,284,5,61,0,0,284,80,1,0,0,0,285,286,5,62,0,0,286,287,
        5,61,0,0,287,82,1,0,0,0,288,289,5,46,0,0,289,290,5,46,0,0,290,291,
        5,46,0,0,291,84,1,0,0,0,292,293,5,61,0,0,293,294,5,61,0,0,294,86,
        1,0,0,0,295,296,5,110,0,0,296,297,5,111,0,0,297,298,5,116,0,0,298,
        88,1,0,0,0,299,300,5,97,0,0,300,301,5,110,0,0,301,302,5,100,0,0,
        302,90,1,0,0,0,303,304,5,111,0,0,304,305,5,114,0,0,305,92,1,0,0,
        0,306,310,7,2,0,0,307,309,7,3,0,0,308,307,1,0,0,0,309,312,1,0,0,
        0,310,308,1,0,0,0,310,311,1,0,0,0,311,94,1,0,0,0,312,310,1,0,0,0,
        313,315,3,99,49,0,314,316,3,101,50,0,315,314,1,0,0,0,315,316,1,0,
        0,0,316,318,1,0,0,0,317,319,3,103,51,0,318,317,1,0,0,0,318,319,1,
        0,0,0,319,96,1,0,0,0,320,321,7,4,0,0,321,98,1,0,0,0,322,324,3,97,
        48,0,323,322,1,0,0,0,324,325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,
        0,0,326,100,1,0,0,0,327,331,5,46,0,0,328,330,3,97,48,0,329,328,1,
        0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,102,1,
        0,0,0,333,331,1,0,0,0,334,336,7,5,0,0,335,337,7,6,0,0,336,335,1,
        0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,340,3,97,48,0,339,338,
        1,0,0,0,340,341,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,104,
        1,0,0,0,343,346,3,21,10,0,344,346,3,23,11,0,345,343,1,0,0,0,345,
        344,1,0,0,0,346,106,1,0,0,0,347,348,5,34,0,0,348,349,3,109,54,0,
        349,350,5,34,0,0,350,351,6,53,1,0,351,108,1,0,0,0,352,357,8,7,0,
        0,353,357,3,111,55,0,354,355,5,39,0,0,355,357,5,34,0,0,356,352,1,
        0,0,0,356,353,1,0,0,0,356,354,1,0,0,0,357,360,1,0,0,0,358,356,1,
        0,0,0,358,359,1,0,0,0,359,110,1,0,0,0,360,358,1,0,0,0,361,362,5,
        92,0,0,362,370,5,98,0,0,363,364,5,92,0,0,364,370,5,116,0,0,365,366,
        5,92,0,0,366,370,5,39,0,0,367,368,5,92,0,0,368,370,5,92,0,0,369,
        361,1,0,0,0,369,363,1,0,0,0,369,365,1,0,0,0,369,367,1,0,0,0,370,
        112,1,0,0,0,371,372,9,0,0,0,372,373,6,56,2,0,373,114,1,0,0,0,374,
        375,5,34,0,0,375,376,3,109,54,0,376,377,6,57,3,0,377,116,1,0,0,0,
        378,385,5,34,0,0,379,384,8,7,0,0,380,384,3,111,55,0,381,382,5,39,
        0,0,382,384,5,34,0,0,383,379,1,0,0,0,383,380,1,0,0,0,383,381,1,0,
        0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,
        0,0,387,385,1,0,0,0,388,389,5,92,0,0,389,390,8,8,0,0,390,391,1,0,
        0,0,391,392,6,58,4,0,392,118,1,0,0,0,16,0,125,135,310,315,318,325,
        331,336,341,345,356,358,369,383,385,5,6,0,0,1,53,0,1,56,1,1,57,2,
        1,58,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 1
    WS = 2
    SB_LEFTBRACKET = 3
    SB_RIGHTBRACKET = 4
    SB_LEFTSQUARE = 5
    SB_RIGHTSQUARE = 6
    SB_DOT = 7
    SB_COMMA = 8
    SB_SEMICOLON = 9
    SB_NEWLINE = 10
    KW_NUMBER = 11
    KW_BOOL = 12
    KW_STRING = 13
    KW_RETURN = 14
    KW_VAR = 15
    KW_DYNAMIC = 16
    KW_FUNC = 17
    KW_FOR = 18
    KW_UNTIL = 19
    KW_BY = 20
    KW_BREAK = 21
    KW_CONTINUE = 22
    KW_IF = 23
    KW_ELSE = 24
    KW_ELIF = 25
    KW_BEGIN = 26
    KW_END = 27
    OP_PLUS = 28
    OP_MINUS = 29
    OP_MULT = 30
    OP_DIV = 31
    OP_MOD = 32
    OP_ASSIGN = 33
    OP_EQUAL_NUM = 34
    OP_UNEQUAL = 35
    OP_LESS = 36
    OP_MORE = 37
    OP_LESSOREQUAL = 38
    OP_MOREOREQUAL = 39
    OP_CONCAT = 40
    OP_EQUAL_STR = 41
    OP_NOT = 42
    OP_AND = 43
    OP_OR = 44
    IDENTIFIER = 45
    NUMBER = 46
    BOOL = 47
    STRING = 48
    ERROR_CHAR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'.'", "','", "';'", "'number'", 
            "'bool'", "'string'", "'return'", "'var'", "'dynamic'", "'func'", 
            "'for'", "'until'", "'by'", "'break'", "'continue'", "'if'", 
            "'else'", "'elif'", "'begin'", "'end'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'<-'", "'='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'...'", "'=='", "'not'", "'and'", "'or'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "WS", "SB_LEFTBRACKET", "SB_RIGHTBRACKET", "SB_LEFTSQUARE", 
            "SB_RIGHTSQUARE", "SB_DOT", "SB_COMMA", "SB_SEMICOLON", "SB_NEWLINE", 
            "KW_NUMBER", "KW_BOOL", "KW_STRING", "KW_RETURN", "KW_VAR", 
            "KW_DYNAMIC", "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", 
            "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", 
            "OP_PLUS", "OP_MINUS", "OP_MULT", "OP_DIV", "OP_MOD", "OP_ASSIGN", 
            "OP_EQUAL_NUM", "OP_UNEQUAL", "OP_LESS", "OP_MORE", "OP_LESSOREQUAL", 
            "OP_MOREOREQUAL", "OP_CONCAT", "OP_EQUAL_STR", "OP_NOT", "OP_AND", 
            "OP_OR", "IDENTIFIER", "NUMBER", "BOOL", "STRING", "ERROR_CHAR", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "COMMENT", "WS", "SB_LEFTBRACKET", "SB_RIGHTBRACKET", 
                  "SB_LEFTSQUARE", "SB_RIGHTSQUARE", "SB_DOT", "SB_COMMA", 
                  "SB_SEMICOLON", "SB_NEWLINE", "KW_TRUE", "KW_FALSE", "KW_NUMBER", 
                  "KW_BOOL", "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", 
                  "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", 
                  "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", 
                  "KW_END", "OP_PLUS", "OP_MINUS", "OP_MULT", "OP_DIV", 
                  "OP_MOD", "OP_ASSIGN", "OP_EQUAL_NUM", "OP_UNEQUAL", "OP_LESS", 
                  "OP_MORE", "OP_LESSOREQUAL", "OP_MOREOREQUAL", "OP_CONCAT", 
                  "OP_EQUAL_STR", "OP_NOT", "OP_AND", "OP_OR", "IDENTIFIER", 
                  "NUMBER", "Digit", "IntPart", "DecPart", "ExpPart", "BOOL", 
                  "STRING", "StringContent", "EscSequence", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[53] = self.STRING_action 
            actions[56] = self.ERROR_CHAR_action 
            actions[57] = self.UNCLOSE_STRING_action 
            actions[58] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:len(self.text)-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:]; raise UncloseString(self.text)
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text[1:]; raise IllegalEscape(self.text)
     


